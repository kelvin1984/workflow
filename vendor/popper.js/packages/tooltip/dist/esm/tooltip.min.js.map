{"version":3,"file":"tooltip.min.js","sources":["../../../popper/src/utils/isFunction.js","../../src/index.js"],"sourcesContent":["/**\r\n * Check if the given variable is a function\r\n * @method\r\n * @memberof Popper.Utils\r\n * @argument {Any} functionToCheck - variable to check\r\n * @returns {Boolean} answer to: is a function?\r\n */\r\nexport default function isFunction(functionToCheck) {\r\n  const getType = {};\r\n  return (\r\n    functionToCheck &&\r\n    getType.toString.call(functionToCheck) === '[object Function]'\r\n  );\r\n}\r\n","import Popper from 'popper.js';\r\nimport isFunction from '../../popper/src/utils/isFunction';\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  container: false,\r\n  delay: 0,\r\n  html: false,\r\n  placement: 'top',\r\n  title: '',\r\n  template:\r\n    '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\r\n  trigger: 'hover focus',\r\n  offset: 0,\r\n  arrowSelector: '.tooltip-arrow, .tooltip__arrow',\r\n  innerSelector: '.tooltip-inner, .tooltip__inner',\r\n};\r\n\r\nexport default class Tooltip {\r\n  /**\r\n   * Create a new Tooltip.js instance\r\n   * @class Tooltip\r\n   * @param {HTMLElement} reference - The DOM node used as reference of the tooltip (it can be a jQuery element).\r\n   * @param {Object} options\r\n   * @param {String} options.placement='top'\r\n   *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -end),\r\n   *      left(-start, -end)`\r\n   * @param {String} [options.arrowSelector='.tooltip-arrow, .tooltip__arrow'] - className used to locate the DOM arrow element in the tooltip.\r\n   * @param {String} [options.innerSelector='.tooltip-inner, .tooltip__inner'] - className used to locate the DOM inner element in the tooltip.\r\n   * @param {HTMLElement|String|false} options.container=false - Append the tooltip to a specific element.\r\n   * @param {Number|Object} options.delay=0\r\n   *      Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type.\r\n   *      If a number is supplied, delay is applied to both hide/show.\r\n   *      Object structure is: `{ show: 500, hide: 100 }`\r\n   * @param {Boolean} options.html=false - Insert HTML into the tooltip. If false, the content will inserted with `textContent`.\r\n   * @param {String} [options.template='<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>']\r\n   *      Base HTML to used when creating the tooltip.\r\n   *      The tooltip's `title` will be injected into the `.tooltip-inner` or `.tooltip__inner`.\r\n   *      `.tooltip-arrow` or `.tooltip__arrow` will become the tooltip's arrow.\r\n   *      The outermost wrapper element should have the `.tooltip` class.\r\n   * @param {String|HTMLElement|TitleFunction} options.title='' - Default title value if `title` attribute isn't present.\r\n   * @param {String} [options.trigger='hover focus']\r\n   *      How tooltip is triggered - click, hover, focus, manual.\r\n   *      You may pass multiple triggers; separate them with a space. `manual` cannot be combined with any other trigger.\r\n   * @param {Boolean} options.closeOnClickOutside=false - Close a popper on click outside of the popper and reference element. This has effect only when options.trigger is 'click'.\r\n   * @param {String|HTMLElement} options.boundariesElement\r\n   *      The element used as boundaries for the tooltip. For more information refer to Popper.js'\r\n   *      [boundariesElement docs](https://popper.js.org/popper-documentation.html)\r\n   * @param {Number|String} options.offset=0 - Offset of the tooltip relative to its reference. For more information refer to Popper.js'\r\n   *      [offset docs](https://popper.js.org/popper-documentation.html)\r\n   * @param {Object} options.popperOptions={} - Popper options, will be passed directly to popper instance. For more information refer to Popper.js'\r\n   *      [options docs](https://popper.js.org/popper-documentation.html)\r\n   * @return {Object} instance - The generated tooltip instance\r\n   */\r\n  constructor(reference, options) {\r\n    // apply user options over default ones\r\n    options = { ...DEFAULT_OPTIONS, ...options };\r\n\r\n    reference.jquery && (reference = reference[0]);\r\n\r\n    // cache reference and options\r\n    this.reference = reference;\r\n    this.options = options;\r\n\r\n    // get events list\r\n    const events =\r\n      typeof options.trigger === 'string'\r\n        ? options.trigger\r\n            .split(' ')\r\n            .filter(\r\n              trigger => ['click', 'hover', 'focus'].indexOf(trigger) !== -1\r\n            )\r\n        : [];\r\n\r\n    // set initial state\r\n    this._isOpen = false;\r\n    this._popperOptions = {};\r\n\r\n    // set event listeners\r\n    this._setEventListeners(reference, events, options);\r\n  }\r\n\r\n  //\r\n  // Public methods\r\n  //\r\n\r\n  /**\r\n   * Reveals an element's tooltip. This is considered a \"manual\" triggering of the tooltip.\r\n   * Tooltips with zero-length titles are never displayed.\r\n   * @method Tooltip#show\r\n   * @memberof Tooltip\r\n   */\r\n  show = () => this._show(this.reference, this.options);\r\n\r\n  /**\r\n   * Hides an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n   * @method Tooltip#hide\r\n   * @memberof Tooltip\r\n   */\r\n  hide = () => this._hide();\r\n\r\n  /**\r\n   * Hides and destroys an element’s tooltip.\r\n   * @method Tooltip#dispose\r\n   * @memberof Tooltip\r\n   */\r\n  dispose = () => this._dispose();\r\n\r\n  /**\r\n   * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n   * @method Tooltip#toggle\r\n   * @memberof Tooltip\r\n   */\r\n  toggle = () => {\r\n    if (this._isOpen) {\r\n      return this.hide();\r\n    } else {\r\n      return this.show();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Updates the tooltip's title content\r\n   * @method Tooltip#updateTitleContent\r\n   * @memberof Tooltip\r\n   * @param {String|HTMLElement} title - The new content to use for the title\r\n   */\r\n  updateTitleContent = (title) => this._updateTitleContent(title);\r\n\r\n  //\r\n  // Private methods\r\n  //\r\n\r\n  _events = [];\r\n\r\n  /**\r\n   * Creates a new tooltip node\r\n   * @memberof Tooltip\r\n   * @private\r\n   * @param {HTMLElement} reference\r\n   * @param {String} template\r\n   * @param {String|HTMLElement|TitleFunction} title\r\n   * @param {Boolean} allowHtml\r\n   * @return {HTMLElement} tooltipNode\r\n   */\r\n  _create(reference, template, title, allowHtml) {\r\n    // create tooltip element\r\n    const tooltipGenerator = window.document.createElement('div');\r\n    tooltipGenerator.innerHTML = template.trim();\r\n    const tooltipNode = tooltipGenerator.childNodes[0];\r\n\r\n    // add unique ID to our tooltip (needed for accessibility reasons)\r\n    tooltipNode.id = `tooltip_${Math.random()\r\n      .toString(36)\r\n      .substr(2, 10)}`;\r\n\r\n    // set initial `aria-hidden` state to `false` (it's visible!)\r\n    tooltipNode.setAttribute('aria-hidden', 'false');\r\n\r\n    // add title to tooltip\r\n    const titleNode = tooltipGenerator.querySelector(this.options.innerSelector);\r\n    this._addTitleContent(reference, title, allowHtml, titleNode);\r\n\r\n    // return the generated tooltip node\r\n    return tooltipNode;\r\n  }\r\n\r\n  _addTitleContent(reference, title, allowHtml, titleNode) {\r\n    if (title.nodeType === 1 || title.nodeType === 11) {\r\n      // if title is a element node or document fragment, append it only if allowHtml is true\r\n      allowHtml && titleNode.appendChild(title);\r\n    } else if (isFunction(title)) {\r\n      // Recursively call ourself so that the return value of the function gets handled appropriately - either\r\n      // as a dom node, a string, or even as another function.\r\n      this._addTitleContent(reference, title.call(reference), allowHtml, titleNode);\r\n    } else {\r\n      // if it's just a simple text, set textContent or innerHtml depending by `allowHtml` value\r\n      allowHtml ? (titleNode.innerHTML = title) : (titleNode.textContent = title);\r\n    }\r\n  }\r\n\r\n  _show(reference, options) {\r\n    // don't show if it's already visible\r\n    // or if it's not being showed\r\n    if (this._isOpen && !this._isOpening) {\r\n      return this;\r\n    }\r\n    this._isOpen = true;\r\n\r\n    // if the tooltipNode already exists, just show it\r\n    if (this._tooltipNode) {\r\n      this._tooltipNode.style.visibility = 'visible';\r\n      this._tooltipNode.setAttribute('aria-hidden', 'false');\r\n      this.popperInstance.update();\r\n      return this;\r\n    }\r\n\r\n    // get title\r\n    const title = reference.getAttribute('title') || options.title;\r\n\r\n    // don't show tooltip if no title is defined\r\n    if (!title) {\r\n      return this;\r\n    }\r\n\r\n    // create tooltip node\r\n    const tooltipNode = this._create(\r\n      reference,\r\n      options.template,\r\n      title,\r\n      options.html\r\n    );\r\n\r\n    // Add `aria-describedby` to our reference element for accessibility reasons\r\n    reference.setAttribute('aria-describedby', tooltipNode.id);\r\n\r\n    // append tooltip to container\r\n    const container = this._findContainer(options.container, reference);\r\n\r\n    this._append(tooltipNode, container);\r\n\r\n    this._popperOptions = {\r\n      ...options.popperOptions,\r\n      placement: options.placement,\r\n    };\r\n\r\n    this._popperOptions.modifiers = {\r\n      ...this._popperOptions.modifiers,\r\n      arrow: {\r\n        ...(this._popperOptions.modifiers && this._popperOptions.modifiers.arrow),\r\n        element: options.arrowSelector,\r\n      },\r\n      offset: {\r\n        ...(this._popperOptions.modifiers && this._popperOptions.modifiers.offset),\r\n        offset: options.offset ||\r\n          this._popperOptions.modifiers && this._popperOptions.modifiers.offset && this._popperOptions.modifiers.offset.offset ||\r\n          options.offset,\r\n      },\r\n    };\r\n\r\n    if (options.boundariesElement) {\r\n      this._popperOptions.modifiers.preventOverflow = {\r\n        boundariesElement: options.boundariesElement,\r\n      };\r\n    }\r\n\r\n    this.popperInstance = new Popper(\r\n      reference,\r\n      tooltipNode,\r\n      this._popperOptions\r\n    );\r\n\r\n    this._tooltipNode = tooltipNode;\r\n\r\n    return this;\r\n  }\r\n\r\n  _hide(/*reference, options*/) {\r\n    // don't hide if it's already hidden\r\n    if (!this._isOpen) {\r\n      return this;\r\n    }\r\n\r\n    this._isOpen = false;\r\n\r\n    // hide tooltipNode\r\n    this._tooltipNode.style.visibility = 'hidden';\r\n    this._tooltipNode.setAttribute('aria-hidden', 'true');\r\n\r\n    return this;\r\n  }\r\n\r\n  _dispose() {\r\n    // remove event listeners first to prevent any unexpected behaviour\r\n    this._events.forEach(({ func, event }) => {\r\n      this.reference.removeEventListener(event, func);\r\n    });\r\n    this._events = [];\r\n\r\n    if (this._tooltipNode) {\r\n      this._hide();\r\n\r\n      // destroy instance\r\n      this.popperInstance.destroy();\r\n\r\n      // destroy tooltipNode if removeOnDestroy is not set, as popperInstance.destroy() already removes the element\r\n      if (!this.popperInstance.options.removeOnDestroy) {\r\n        this._tooltipNode.parentNode.removeChild(this._tooltipNode);\r\n        this._tooltipNode = null;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  _findContainer(container, reference) {\r\n    // if container is a query, get the relative element\r\n    if (typeof container === 'string') {\r\n      container = window.document.querySelector(container);\r\n    } else if (container === false) {\r\n      // if container is `false`, set it to reference parent\r\n      container = reference.parentNode;\r\n    }\r\n    return container;\r\n  }\r\n\r\n  /**\r\n   * Append tooltip to container\r\n   * @memberof Tooltip\r\n   * @private\r\n   * @param {HTMLElement} tooltipNode\r\n   * @param {HTMLElement|String|false} container\r\n   */\r\n  _append(tooltipNode, container) {\r\n    container.appendChild(tooltipNode);\r\n  }\r\n\r\n  _setEventListeners(reference, events, options) {\r\n    const directEvents = [];\r\n    const oppositeEvents = [];\r\n\r\n    events.forEach(event => {\r\n      switch (event) {\r\n        case 'hover':\r\n          directEvents.push('mouseenter');\r\n          oppositeEvents.push('mouseleave');\r\n          break;\r\n        case 'focus':\r\n          directEvents.push('focus');\r\n          oppositeEvents.push('blur');\r\n          break;\r\n        case 'click':\r\n          directEvents.push('click');\r\n          oppositeEvents.push('click');\r\n          break;\r\n      }\r\n    });\r\n\r\n    // schedule show tooltip\r\n    directEvents.forEach(event => {\r\n      const func = evt => {\r\n        if (this._isOpening === true) {\r\n          return;\r\n        }\r\n        evt.usedByTooltip = true;\r\n        this._scheduleShow(reference, options.delay, options, evt);\r\n      };\r\n      this._events.push({ event, func });\r\n      reference.addEventListener(event, func);\r\n    });\r\n\r\n    // schedule hide tooltip\r\n    oppositeEvents.forEach(event => {\r\n      const func = evt => {\r\n        if (evt.usedByTooltip === true) {\r\n          return;\r\n        }\r\n        this._scheduleHide(reference, options.delay, options, evt);\r\n      };\r\n      this._events.push({ event, func });\r\n      reference.addEventListener(event, func);\r\n      if (event === 'click' && options.closeOnClickOutside) {\r\n        document.addEventListener('mousedown', e => {\r\n          if (!this._isOpening) {\r\n            return;\r\n          }\r\n          const popper = this.popperInstance.popper;\r\n          if (reference.contains(e.target) ||\r\n              popper.contains(e.target)) {\r\n            return;\r\n          }\r\n          func(e);\r\n        }, true);\r\n      }\r\n    });\r\n  }\r\n\r\n  _scheduleShow(reference, delay, options /*, evt */) {\r\n    this._isOpening = true;\r\n    // defaults to 0\r\n    const computedDelay = (delay && delay.show) || delay || 0;\r\n    this._showTimeout = window.setTimeout(\r\n      () => this._show(reference, options),\r\n      computedDelay\r\n    );\r\n  }\r\n\r\n  _scheduleHide(reference, delay, options, evt) {\r\n    this._isOpening = false;\r\n    // defaults to 0\r\n    const computedDelay = (delay && delay.hide) || delay || 0;\r\n    window.clearTimeout(this._showTimeout);\r\n    window.setTimeout(() => {\r\n      if (this._isOpen === false) {\r\n        return;\r\n      }\r\n      if (!document.body.contains(this._tooltipNode)) {\r\n        return;\r\n      }\r\n\r\n      // if we are hiding because of a mouseleave, we must check that the new\r\n      // reference isn't the tooltip, because in this case we don't want to hide it\r\n      if (evt.type === 'mouseleave') {\r\n        const isSet = this._setTooltipNodeEvent(evt, reference, delay, options);\r\n\r\n        // if we set the new event, don't hide the tooltip yet\r\n        // the new event will take care to hide it if necessary\r\n        if (isSet) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      this._hide(reference, options);\r\n    }, computedDelay);\r\n  }\r\n\r\n  _setTooltipNodeEvent = (evt, reference, delay, options) => {\r\n    const relatedreference =\r\n      evt.relatedreference || evt.toElement || evt.relatedTarget;\r\n\r\n    const callback = evt2 => {\r\n      const relatedreference2 =\r\n        evt2.relatedreference || evt2.toElement || evt2.relatedTarget;\r\n\r\n      // Remove event listener after call\r\n      this._tooltipNode.removeEventListener(evt.type, callback);\r\n\r\n      // If the new reference is not the reference element\r\n      if (!reference.contains(relatedreference2)) {\r\n        // Schedule to hide tooltip\r\n        this._scheduleHide(reference, options.delay, options, evt2);\r\n      }\r\n    };\r\n\r\n    if (this._tooltipNode.contains(relatedreference)) {\r\n      // listen to mouseleave on the tooltip element to be able to hide the tooltip\r\n      this._tooltipNode.addEventListener(evt.type, callback);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  _updateTitleContent(title) {\r\n    if(typeof this._tooltipNode === 'undefined') {\r\n      if(typeof this.options.title !== 'undefined') {\r\n        this.options.title = title;\r\n      }\r\n      return;\r\n    }\r\n    const titleNode = this._tooltipNode.querySelector(this.options.innerSelector);\r\n    this._clearTitleContent(titleNode, this.options.html, this.reference.getAttribute('title') || this.options.title)\r\n    this._addTitleContent(this.reference, title, this.options.html, titleNode);\r\n    this.options.title = title;\r\n    this.popperInstance.update();\r\n  }\r\n\r\n  _clearTitleContent(titleNode, allowHtml, lastTitle) {\r\n    if(lastTitle.nodeType === 1 || lastTitle.nodeType === 11) {\r\n      allowHtml && titleNode.removeChild(lastTitle);\r\n    } else {\r\n      allowHtml ? titleNode.innerHTML = '' : titleNode.textContent = '';\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Title function, its context is the Tooltip instance.\r\n * @memberof Tooltip\r\n * @callback TitleFunction\r\n * @return {String} placement - The desired title.\r\n */\r\n"],"names":["functionToCheck","getType","toString","call","DEFAULT_OPTIONS","Tooltip","jquery","reference","options","events","trigger","split","filter","indexOf","_isOpen","_popperOptions","_setEventListeners","tooltipGenerator","window","document","createElement","innerHTML","template","trim","tooltipNode","childNodes","id","Math","random","substr","setAttribute","titleNode","querySelector","innerSelector","_addTitleContent","title","nodeType","appendChild","isFunction","textContent","_isOpening","_tooltipNode","style","visibility","popperInstance","update","getAttribute","_create","html","container","_findContainer","_append","popperOptions","placement","modifiers","arrow","arrowSelector","offset","boundariesElement","preventOverflow","_events","forEach","func","event","removeEventListener","_hide","destroy","removeOnDestroy","parentNode","removeChild","directEvents","oppositeEvents","push","usedByTooltip","_scheduleShow","delay","addEventListener","evt","_scheduleHide","closeOnClickOutside","popper","contains","e","target","computedDelay","show","_showTimeout","setTimeout","_show","hide","clearTimeout","body","type","isSet","_setTooltipNodeEvent","_clearTitleContent","lastTitle","dispose","_dispose","toggle","updateTitleContent","_updateTitleContent","relatedreference","toElement","relatedTarget","relatedreference2","evt2"],"mappings":"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"}